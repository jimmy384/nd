{
  "author" : "jimmy",
  "version" : "1.2.7",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "DDD",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "DDD",
  "typeMapper" : { },
  "template" : {
    "DDD" : {
      "name" : "DDD",
      "elementList" : [ {
        "name" : "entity.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${modelClassFilePath}, \"${modelClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${modelClassPackageName};\n\n## 使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n## 插入类注释信息\n#classComment(\"实体\")\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class $!{modelClassName} {\n#foreach($column in $tableInfo.fullColumn)\n#if(${column.name}!='id' && ${column.name}!='createTime' && ${column.name}!='updateTime')\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n#if(${column.obj.dataType}=='tinyint')\n    // todo 字典枚举类\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n}\n"
      }, {
        "name" : "vo.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${voClassFilePath}, \"${voClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${voClassPackageName};\n\n## 使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n## 插入类注释信息\n#classComment(\"VO对象\")\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class $!{voClassName} {\n#foreach($column in $tableInfo.fullColumn)\n#if(${column.name}!='id' && ${column.name}!='createTime' && ${column.name}!='updateTime')\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n#if(${column.obj.dataType}=='tinyint')\n    // todo 字典枚举类\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n}\n"
      }, {
        "name" : "dto.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${dtoClassFilePath}, \"${dtoClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${dtoClassPackageName};\n\n## 使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n## 插入类注释信息\n#classComment(\"DTO对象\")\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class $!{dtoClassName} {\n#foreach($column in $tableInfo.fullColumn)\n#if(${column.name}!='id' && ${column.name}!='createTime' && ${column.name}!='updateTime')\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n#if(${column.obj.dataType}=='tinyint')\n    // todo 字典枚举类\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n}\n"
      }, {
        "name" : "request.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${requestClassFilePath}, \"${requestClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${requestClassPackageName};\n\n## 使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n## 插入类注释信息\n#classComment(\"请求对象\")\n@Data\n@EqualsAndHashCode(callSuper = true)\npublic class $!{requestClassName} {\n#foreach($column in $tableInfo.fullColumn)\n#if(${column.name}!='id' && ${column.name}!='createTime' && ${column.name}!='updateTime')\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n#if(${column.obj.dataType}=='tinyint')\n    // todo 字典枚举类\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n}\n"
      }, {
        "name" : "dtoToEntityConverter.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${dtoToEntityConverterClassFilePath}, \"${dtoToEntityConverterClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${dtoToEntityConverterClassPackageName};\n\nimport jimmy.practice.basic.common.utils.bean.Converter;\nimport ${voClassFullName};\nimport ${dtoClassFullName};\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface ${dtoToEntityConverterClassName} extends Converter<${dtoClassName}, ${voClassName}> {\n    ${dtoToEntityConverterClassName} INSTANCE = Mappers.getMapper(${dtoToEntityConverterClassName}.class);\n}\n"
      }, {
        "name" : "entityToVOConverter.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${entityToVOConverterClassFilePath}, \"${entityToVOConverterClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${entityToVOConverterClassPackageName};\n\nimport jimmy.practice.basic.common.utils.bean.Converter;\nimport ${modelClassFullName};\nimport ${voClassFullName};\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface ${entityToVOConverterClassName} extends Converter<${modelClassName}, ${voClassName}> {\n    ${entityToVOConverterClassName} INSTANCE = Mappers.getMapper(${entityToVOConverterClassName}.class);\n}\n"
      }, {
        "name" : "requestToDTOConverter.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${requestToDTOConverterClassFilePath}, \"${requestToDTOConverterClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${requestToDTOConverterClassPackageName};\n\nimport jimmy.practice.basic.common.utils.bean.Converter;\nimport ${requestClassFullName};\nimport ${dtoClassFullName};\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface ${requestToDTOConverterClassName} extends Converter<${requestClassName}, ${dtoClassName}> {\n    ${requestToDTOConverterClassName} INSTANCE = Mappers.getMapper(${requestToDTOConverterClassName}.class);\n}\n"
      }, {
        "name" : "voToDTOConverter.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${voToDTOConverterClassFilePath}, \"${voToDTOConverterClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${voToDTOConverterClassPackageName};\n\nimport jimmy.practice.basic.common.utils.bean.Converter;\nimport ${voClassFullName};\nimport ${dtoClassFullName};\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface ${voToDTOConverterClassName} extends Converter<${voClassName}, ${dtoClassName}> {\n    ${voToDTOConverterClassName} INSTANCE = Mappers.getMapper(${voToDTOConverterClassName}.class);\n}\n"
      }, {
        "name" : "dao.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${daoClassFilePath}, \"${daoClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${daoClassPackageName};\n\n#classComment(\"DAO层\")\npublic interface ${daoClassName} {\n\n}"
      }, {
        "name" : "repository.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${repositoryClassFilePath}, \"${repositoryClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${repositoryClassPackageName};\n\n#classComment(\"Repository层\")\npublic interface ${repositoryClassName} {\n\n}"
      }, {
        "name" : "repositoryImpl.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${repositoryImplClassFilePath}, \"${repositoryImplClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${repositoryImplClassPackageName};\n\nimport ${repositoryClassFullName};\n\n#classComment(\"Repository层实现\")\npublic class ${repositoryImplClassName} implements ${repositoryClassName} {\n\n}"
      }, {
        "name" : "domainService.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${domainServiceClassFilePath}, \"${domainServiceClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${domainServiceClassPackageName};\n\n#classComment(\"领域层服务\")\npublic interface ${domainServiceClassName} {\n\n}"
      }, {
        "name" : "domainServiceImpl.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${domainServiceImplClassFilePath}, \"${domainServiceImplClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${domainServiceImplClassPackageName};\n\nimport ${domainServiceClassFullName};\n\n#classComment(\"领域层服务实现\")\npublic class ${domainServiceImplClassName} implements ${domainServiceClassName} {\n\n}"
      }, {
        "name" : "appService.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${appServiceClassFilePath}, \"${appServiceClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${appServiceClassPackageName};\n\n#classComment(\"应用层服务\")\npublic interface ${appServiceClassName} {\n\n}"
      }, {
        "name" : "appServiceImpl.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${appServiceImplClassFilePath}, \"${appServiceImplClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${appServiceImplClassPackageName};\n\nimport ${appServiceClassFullName};\n\n#classComment(\"应用层服务实现实现\")\npublic class ${appServiceImplClassName} implements ${appServiceClassName} {\n\n}"
      }, {
        "name" : "controller.java.vm",
        "code" : "## 引入宏定义\n$!{define.vm}\n## 设置文件保存的路径\n#setFilePath(${controllerClassFilePath}, \"${controllerClassName}.java\")\n\n## ------------ 下面开始生成文件内容 ------------\npackage ${controllerClassPackageName};\n\n#classComment(\"Interface层服务\")\npublic class ${controllerClassName} {\n\n}"
      }, {
        "name" : "debug.json.vm",
        "code" : "// 禁止将生成结果写入到文件\n$!callback.setWriteFile(false)\n\n//调试表原始对象\n$!tool.debug($tableInfo.obj)\n\n//调试列原始对象\n$!tool.debug($tableInfo.fullColumn.get(0).obj)\n\n//调试列原始列类型\n$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)\n\n//获取原始列类型中的字段\nsqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, \"typeName\")\n\n//执行原始列类型中的方法\nsqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()\n"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <!--查询指定行数据-->\n    <select id=\"queryAllByLimit\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n        limit #{pageable.offset}, #{pageable.pageSize}\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(1)\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name)#if($velocityHasNext),\n        #end#end\n\n    </insert>\n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键删除-->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n\n</mapper>\n"
      } ]
    }
  },
  "columnConfig" : { },
  "globalConfig" : {
    "DDD" : {
      "name" : "DDD",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n## 1.设置模型名称，设置后有两个可用的变量\n## ${modelName}：模型名称\n## ${modelNameCN}：模型中文名称\n## 调用方式：#prepareModelName(\"前缀\", \"后缀\")\n#macro(prepareModelName $prefix $shufix)\n#set($modelName = $tableInfo.name)\n#if($prefix)\n    #set($modelName = $modelName.replace($prefix, ''))\n#end\n#if($shufix)\n    #set($modelName = $modelName.replace($shufix, ''))\n#end\n#set($modelNameCN = $modelName)\n#if($tableInfo.comment)\n    #set($modelNameCN = $tableInfo.comment)\n#end\n#end\n\n\n## 2.设置文件保存的路径，拼接在生成界面选的路径后面\n## 调用方式：#setFilePath(\"/entity\", \"User.java\")\n#macro(setFilePath $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($fileName))\n#end\n\n\n## 3.插入Java文件声明package的行\n## 调用方式：#packageLine(\"entity\")\n#macro(packageLine $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n\n## 4.插入类注释，模型中文名称 + 传入的注释\n## 调用方式：#tableModelComment(\"注释信息\")\n#macro(classComment $desc)\n/**\n * $!{modelNameCN}$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end\n\n\n#prepareModelName(\"Uc\")\n\n#set($modelClassFilePath = \"/entity\")\n#set($modelClassName = \"${modelName}\")\n#set($modelClassPackageName = \"${tableInfo.savePackageName}.entity\")\n#set($modelClassFullName = \"${modelClassPackageName}.${modelClassName}\")\n\n#set($voClassFilePath = \"/vo\")\n#set($voClassName = \"${modelName}VO\")\n#set($voClassPackageName = \"${tableInfo.savePackageName}.vo\")\n#set($voClassFullName = \"${voClassPackageName}.${voClassName}\")\n\n#set($dtoClassFilePath = \"/dto\")\n#set($dtoClassName = \"${modelName}DTO\")\n#set($dtoClassPackageName = \"${tableInfo.savePackageName}.dto\")\n#set($dtoClassFullName = \"${dtoClassPackageName}.${dtoClassName}\")\n\n#set($requestClassFilePath = \"/request\")\n#set($requestClassName = \"${modelName}Request\")\n#set($requestClassPackageName = \"${tableInfo.savePackageName}.request\")\n#set($requestClassFullName = \"${requestClassPackageName}.${requestClassName}\")\n\n#set($dtoToEntityConverterClassFilePath = \"/converter\")\n#set($dtoToEntityConverterClassName = \"${modelName}DTOToEntityConverter\")\n#set($dtoToEntityConverterClassPackageName = \"${tableInfo.savePackageName}.converter\")\n#set($dtoToEntityConverterClassFullName = \"${dtoToEntityConverterClassPackageName}.${dtoToEntityConverterClassName}\")\n\n#set($entityToVOConverterClassFilePath = \"/converter\")\n#set($entityToVOConverterClassName = \"${modelName}EntityToVOConverter\")\n#set($entityToVOConverterClassPackageName = \"${tableInfo.savePackageName}.converter\")\n#set($entityToVOConverterClassFullName = \"${entityToVOConverterClassPackageName}.${entityToVOConverterClassName}\")\n\n#set($requestToDTOConverterClassFilePath = \"/converter\")\n#set($requestToDTOConverterClassName = \"${modelName}RequestToDTOConverter\")\n#set($requestToDTOConverterClassPackageName = \"${tableInfo.savePackageName}.converter\")\n#set($requestToDTOConverterClassFullName = \"${requestToDTOConverterClassPackageName}.${requestToDTOConverterClassName}\")\n\n#set($voToDTOConverterClassFilePath = \"/converter\")\n#set($voToDTOConverterClassName = \"${modelName}VOToDTOConverter\")\n#set($voToDTOConverterClassPackageName = \"${tableInfo.savePackageName}.converter\")\n#set($voToDTOConverterClassFullName = \"${voToDTOConverterClassPackageName}.${voToDTOConverterClassName}\")\n\n#set($daoClassFilePath = \"/dao\")\n#set($daoClassName = \"${modelName}DAO\")\n#set($daoClassPackageName = \"${tableInfo.savePackageName}.dao\")\n#set($daoClassFullName = \"${daoClassPackageName}.${daoClassName}\")\n\n#set($repositoryClassFilePath = \"/repository/api\")\n#set($repositoryClassName = \"${modelName}Repository\")\n#set($repositoryClassPackageName = \"${tableInfo.savePackageName}.repository.api\")\n#set($repositoryClassFullName = \"${repositoryClassPackageName}.${repositoryClassName}\")\n\n#set($repositoryImplClassFilePath = \"/repository/impl\")\n#set($repositoryImplClassName = \"${modelName}RDBRepository\")\n#set($repositoryImplClassPackageName = \"${tableInfo.savePackageName}.repository.impl\")\n#set($repositoryImplClassFullName = \"${repositoryImplClassPackageName}.${repositoryImplClassName}\")\n\n#set($domainServiceClassFilePath = \"/service/api\")\n#set($domainServiceClassName = \"${modelName}DomainService\")\n#set($domainServiceClassPackageName = \"${tableInfo.savePackageName}.service.api\")\n#set($domainServiceClassFullName = \"${domainServiceClassPackageName}.${domainServiceClassName}\")\n\n#set($domainServiceImplClassFilePath = \"/service/impl\")\n#set($domainServiceImplClassName = \"${modelName}DomainServiceImpl\")\n#set($domainServiceImplClassPackageName = \"${tableInfo.savePackageName}.service.impl\")\n#set($domainServiceImplClassFullName = \"${domainServiceImplClassPackageName}.${domainServiceImplClassName}\")\n\n#set($appServiceClassFilePath = \"/application/api\")\n#set($appServiceClassName = \"${modelName}AppService\")\n#set($appServiceClassPackageName = \"${tableInfo.savePackageName}.application.api\")\n#set($appServiceClassFullName = \"${appServiceClassPackageName}.${appServiceClassName}\")\n\n#set($appServiceImplClassFilePath = \"/application/impl\")\n#set($appServiceImplClassName = \"${modelName}AppServiceImpl\")\n#set($appServiceImplClassPackageName = \"${tableInfo.savePackageName}.application.impl\")\n#set($appServiceImplClassFullName = \"${appServiceImplClassPackageName}.${appServiceImplClassName}\")\n\n#set($controllerClassFilePath = \"/controller\")\n#set($controllerClassName = \"${modelName}UIAPI\")\n#set($controllerClassPackageName = \"${tableInfo.savePackageName}.controller\")\n#set($controllerClassFullName = \"${controllerClassPackageName}.${controllerClassName}\")\n\n"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}